#!/usr/bin/env node

/**
 * Generate CLI documentation from the command registry
 */

import { Effect, Console } from 'effect';
import { NodeRuntime } from '@effect/platform-node';
import * as fs from 'fs';
import * as path from 'path';
import { commandRegistry } from './command-registry';

const generateDocs = Effect.gen(function* () {
  const lines: string[] = [
    '<!-- THIS FILE IS AUTO-GENERATED. DO NOT EDIT DIRECTLY. -->',
    '<!-- Run "pnpm run docs:cli" to regenerate this file. -->',
    '',
    '# Janus CLI Command Reference',
    '',
    '_Auto-generated from command definitions_',
    '',
    '> **Note:** This file is automatically generated. Do not edit it directly.',
    '> To update this documentation, run `pnpm run docs:cli`.',
    '',
    '## Installation',
    '',
    '```bash',
    'pnpm run build',
    'npm link  # For global installation',
    '```',
    '',
    '## Commands',
    '',
  ];

  // Group commands by top-level command
  const commandGroups = new Map<string, typeof commandRegistry>();
  
  for (const cmd of commandRegistry) {
    const topLevel = cmd.path.split(' ')[0];
    if (!commandGroups.has(topLevel)) {
      commandGroups.set(topLevel, []);
    }
    commandGroups.get(topLevel)!.push(cmd);
  }

  // Document each command group
  for (const [group, commands] of commandGroups) {
    lines.push(`### \`janus ${group}\`\n`);
    lines.push('Manage snippets (pull, push, list, search)\n');
    lines.push('#### Subcommands\n');

    for (const cmd of commands) {
      // Command header
      lines.push(`##### \`janus ${cmd.path}${cmd.args ? ' ' + cmd.args.map(a => `<${a.name}>`).join(' ') : ''}\`\n`);
      lines.push(`${cmd.description}\n`);
      
      // Arguments
      if (cmd.args && cmd.args.length > 0) {
        lines.push('**Arguments:**');
        for (const arg of cmd.args) {
          lines.push(`- \`${arg.name}\`${arg.required ? ' (required)' : ''}: ${arg.description}`);
        }
        lines.push('');
      }
      
      // Options
      if (cmd.options && cmd.options.length > 0) {
        lines.push('**Options:**');
        for (const opt of cmd.options) {
          const flags = opt.alias ? `${opt.alias}, ${opt.flag}` : opt.flag;
          lines.push(`- \`${flags}\`${opt.required ? ' (required)' : ''}: ${opt.description}`);
        }
        lines.push('');
      }

      // Examples
      if (cmd.examples && cmd.examples.length > 0) {
        lines.push('**Examples:**');
        lines.push('```bash');
        for (const example of cmd.examples) {
          lines.push(example);
        }
        lines.push('```\n');
      }
    }
  }

  // Add note about updating
  lines.push('## Adding New Commands\n');
  lines.push('To add documentation for new commands:');
  lines.push('1. Add the command details to `src/cli/command-registry.ts`');
  lines.push('2. Run `pnpm run docs:cli` to regenerate this file\n');

  // Add generated timestamp
  lines.push('---');
  lines.push(`_Generated on ${new Date().toISOString()}_`);

  const outputPath = path.join(__dirname, '../../docs/cli-commands.md');
  fs.writeFileSync(outputPath, lines.join('\n'));
  
  yield* Console.log(`âœ“ Generated CLI documentation at ${outputPath}`);
  yield* Console.log(`  Documented ${commandRegistry.length} commands`);
});

NodeRuntime.runMain(generateDocs);